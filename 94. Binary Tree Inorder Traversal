94. Binary Tree Inorder Traversal

Given the root of a binary tree, return the inorder traversal of its nodes' values.

 

Example 1:


Input: root = [1,null,2,3]
Output: [1,3,2]
Example 2:

Input: root = []
Output: []
Example 3:

Input: root = [1]
Output: [1]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100
 

Follow up: Recursive solution is trivial, could you do it iteratively?





------------------------ CODE -------------------------


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 #include <stack>
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        TreeNode *curr=root;
        stack<TreeNode *> myStack;
        vector<int> result;
        while(true){
            if(curr!=NULL){
                myStack.push(curr);
                curr=curr->left;
            }
            else if(!myStack.empty()){
                curr=myStack.top();
                myStack.pop();
                result.push_back(curr->val);
                curr=curr->right;
            }
            else{
                break;
            }
        }
        return result;  
    }
};
