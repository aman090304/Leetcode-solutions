35. Search Insert Position
Solved
Easy
Topics: Array, Binary Search
Companies
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [1,3,5,6], target = 5
Output: 2
Example 2:

Input: nums = [1,3,5,6], target = 2
Output: 1
Example 3:

Input: nums = [1,3,5,6], target = 7
Output: 4
 

Constraints:

1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums contains distinct values sorted in ascending order.
-104 <= target <= 104



------------------ CODE --------------------


// without binary search 
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        for(int i=0;i<nums.size();i++){
            if(i==0 && nums[0]>target)
                return 0;

            if(nums[i]==target)
                return i;
            else
            {
                if(nums[i]>target && nums[i-1]<=target)
                    return i;
                
            }


        }
        if(nums.size()==1)
        {
            if(target<=nums[0])
                return 0;
            else 
                return 1;
        }
        return nums.size();
    }
};



----------------- CODE --------------------
//with binary search

class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int low=0;
        int high=nums.size();
        int mid;
        if(target>nums[high-1]){
            return high;
        }
        while(low<=high){
              mid=(low+high)/2;
            if(nums[mid]==target){  
                return mid;
            }
          
            if(target<nums[mid])     
              high=mid-1;    
            else
              low=mid+1; 
        }
         return  low;   
    }
};
